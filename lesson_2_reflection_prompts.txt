What happens when you initialize a repository? Why do you need to do it?

	git init creates a .git directory containing information about the repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area allows you to make changes without affecting the orginals and before you make a commit.

How can you use the staging area to make sure you have one commit per logical change?

	You can add the files that contained the changes for the logical commit to the staging area, compare to most recent commit in the repository and the local copy, or commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches allow you to make different versions of your code, like one in Italian or easy mode, but also allow you to update all the branches with the main branch instead of each one individually.  The master branch can be production, while each branch is used for a new context, a new feature, a bug fix, etc.

How do the diagrams help you visualize the branch structure?
	
	Diagrams help you see what commits are unreachable and what commits are in a branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging brings the two branches into one.  The diagram helps visualize what commits will be included in the merging of the branches.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	Automatically merging would be easier, however, it would be more likely to make the wrong selection as far as what to keep or discard.